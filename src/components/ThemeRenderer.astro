---
// ŚCIEŻKA: src/components/ThemeRenderer.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import { getSection } from '../lib/sectionRegistry';

export interface Props {
  content: {
    theme: string;
    meta: {
      title: string;
      description: string;
      canonical?: string;
      image?: string;
      noindex?: boolean;
      structuredData?: object;
    };
    therapist?: {
      name: string;
      [key: string]: any;
    };
    sections: Array<{
      type: string;
      data: any;
      settings?: any;
    }>;
  };
}

const { content } = Astro.props;

// Sprawdź czy content istnieje
if (!content) {
  throw new Error('No content provided to ThemeRenderer');
}

const { theme, meta, sections, therapist } = content;

// Sprawdź czy theme ma własny header
let hasCustomHeader = false;
let HeaderComponent = null;

try {
  // TODO: Dodać header do registry jeśli potrzebny
  hasCustomHeader = false;
} catch (e) {
  // Theme nie ma własnego headera, użyjemy domyślnego
}

// Pobierz komponenty sekcji z registry
const sectionComponents = sections.map(section => {
  const Component = getSection(theme, section.type);
  if (!Component) {
    console.error(`Failed to load section ${section.type} from theme ${theme}`);
    return null;
  }
  return { ...section, Component };
});

const validSections = sectionComponents.filter((section): section is NonNullable<typeof section> => section !== null);
---

<BaseLayout 
  title={meta.title}
  description={meta.description}
  canonical={meta.canonical}
  image={meta.image}
  noindex={meta.noindex}
  structuredData={meta.structuredData}
  showHeader={!hasCustomHeader}
  headerVariant={hasCustomHeader ? 'custom' : 'default'}
>
  {hasCustomHeader && HeaderComponent && therapist && (
    <HeaderComponent slot="header" therapistName={therapist.name} />
  )}
  
  {validSections.map((section) => {
    if (!section) return null;
    const { Component, data, settings } = section;
    return <Component data={data} settings={settings} />;
  })}
</BaseLayout>

<style>
  /* Theme-specific CSS variables */
  :root {
    --theme-primary: #c2410c; /* orange-700 */
    --theme-secondary: #111827; /* gray-900 */
    --theme-accent: #ea580c; /* orange-600 */
  }
  
  [data-theme="minimal"] {
    --theme-primary: #171717; /* neutral-900 */
    --theme-secondary: #404040; /* neutral-700 */
    --theme-accent: #525252; /* neutral-600 */
  }
</style>